import TTS_UNITTEST:TestBase;
import TTS_UNITTEST:Exceptions:AssertFailed;

/* Basic Test-Class structure 
import Y_TEST:BaseTest;

class Test-Class extends Y_TEST:BaseTest
   method Test-Class();
   method RunHook();
protected
   rem tests;
private
   rem helper methods;
end-class;

method Test-Class
   %Super = create Y_TEST:BaseTest("Test-Class");
end-method;

method RunHook
   /+ Extends/implements Y_TEST:BaseTest.RunHook +/
   rem either run manually;
   rem <run test methods>
   rem %This.tests = <number-of-tests-run>;

   rem or run automatically;
   rem %This.runTestMethodsInClass(String(%this));
end-method;
*/

/**
  * A PSUnit BaseTest wrapper that adds additional functionality to PSUnit. This introduces changes such 
  * as the ability to count the number of test methods run, as well as the number of assertions made in 
  * the tests.
  *
  * @author Cache Staheli - Brigham Young University
  */
class BaseTest extends TTS_UNITTEST:TestBase
   method Run();
   method RunHook() abstract;
   method TearDown();
   method BaseTest(&_unitTestName As string);
   
   method Fail(&failureReason As string);
   method FailWithException(&exception As Exception);
   method Pass(&discardedReason As string);
   
   method AssertTrue(&condition As boolean, &failureMessage As string);
   method AssertFalse(&condition As boolean, &failureMessage As string);
   method AssertExists(&value As any, &onFail As string);
   method AssertEquals(&expected As any, &actual As any, &onFail As string);
   method AssertNotEqual(&expected As any, &actual As any, &onFail As string);
   method AssertStringsEqual(&expected As string, &actual As string, &onFail As string);
   method AssertStringsDiffer(&expected As string, &actual As string, &onFail As string);
   method AssertNumbersEqual(&expected As number, &actual As number, &onFail As string);
   method AssertNumbersDiffer(&expected As number, &actual As number, &onFail As string);
   method AssertDatesEqual(&expected As date, &actual As date, &onFail As string);
   method AssertDatesDiffer(&expected As date, &actual As date, &onFail As string);
   method AssertObjectsEqual(&expected As any, &actual As any, &onFail As string);
   method AssertObjectsDiffer(&expected As any, &actual As any, &onFail As string)
protected
   method testCaseSucceeded();
   method testCaseFailed(&reason As string);
   method testEquals(&first As any, &second As any, &useSimpleEquals As boolean) Returns boolean;
   method getfailureReasons() Returns string;
   method runTestMethodsInClass(&classPath As string);
   
   property number testCasesFailed;
   property number testCasesSucceeded;
   property number tests;
private
   instance array of string &failureReasons;
end-class;

method BaseTest
   /+ &_unitTestName as String +/
   &failureReasons = CreateArrayRept("", 0);
   %Super = create TTS_UNITTEST:TestBase(&_unitTestName);
end-method;

method Run
   /+ Extends/implements TTS_UNITTEST:TestBase.Run +/
   Local string &DB;
   SQLExec("SELECT SYSTEMTYPE FROM PSOPTIONS", &DB);
   If &DB = "PRD" Then
      Error "This test can only be run in non-production";
   End-If;
   
   %This.RunHook();
   %This.Msg(%This.UnitTestName);
   %This.Msg("Tests Run: " | %This.tests | ", Total Test Cases Succeeded: " | %This.testCasesSucceeded | ", Total Test Cases Failed: " | %This.testCasesFailed);
   %This.Msg(%This.getfailureReasons());
end-method;

method TearDown
   /+ Extends/implements TTS_UNITTEST:TestBase.Teardown +/
   SQLExec("ROLLBACK");
end-method;

method testCaseSucceeded
   &testCasesSucceeded = &testCasesSucceeded + 1;
end-method;

method testCaseFailed
   /+ &reason as String +/
   &testCasesFailed = &testCasesFailed + 1;
   &failureReasons.Push(&reason);
end-method;

method getfailureReasons
   /+ Returns String +/
   If &failureReasons.Len > 0 Then
      Local string &allReasons = "1. " | &failureReasons [1];
      Local number &i;
      For &i = 2 To &failureReasons.Len
         &allReasons = &allReasons | Char(10) | &i | ". " | &failureReasons [&i];
      End-For;
      Return "Failure Reasons: " | Char(13) | &allReasons;
   End-If;
   Return "";
end-method;

/**
  * This method determines if two objects are equal. If they are simple objects that can be compared with the equals sign, 
  * this is the same as calling `Return (&first = &second)`. If they are marked as non simple by the third parameter,
  * the method `.equals` will be called on the first to determine if it is the same.
  */
method testEquals
   /+ &first as Any, +/
   /+ &second as Any, +/
   /+ &useSimpleEquals as Boolean +/
   /+ Returns Boolean +/
   If &useSimpleEquals Then
      Return (&first = &second);
   Else
      Return (&first.equals(&second));
   End-If;
end-method;

method AssertObjectsEqual
   /+ &expected as Any, +/
   /+ &actual as Any, +/
   /+ &onFail as String +/
   If Not (&expected.equals(&actual)) Then
      %This.testCaseFailed(&onFail);
      
      Local string &msg = &expected.toString() | " <> " | &actual.toString() | "! " | &onFail;
      throw create TTS_UNITTEST:Exceptions:AssertFailed(&msg);
   End-If;
   
   %This.testCaseSucceeded();
end-method;

method AssertObjectsDiffer
   /+ &expected as Any, +/
   /+ &actual as Any, +/
   /+ &onFail as String +/
   If (&expected.equals(&actual)) Then
      %This.testCaseFailed(&onFail);
      
      Local string &msg = &expected.toString() | " = " | &actual.toString() | "! " | &onFail;
      throw create TTS_UNITTEST:Exceptions:AssertFailed(&msg);
   End-If;
   
   %This.testCaseSucceeded();
end-method;

/**
  * If the given condition is true, a test will succeed. Otherwise, it will fail with the given message.
  */
method AssertTrue
   /+ &condition as Boolean, +/
   /+ &failureMessage as String +/
   try
      %Super.Assert(&condition, &failureMessage);
      %This.testCaseSucceeded();
   catch TTS_UNITTEST:Exceptions:AssertFailed &e
      %This.testCaseFailed(&failureMessage);
      throw &e;
   end-try;
end-method;

method AssertFalse
   /+ &condition as Boolean, +/
   /+ &failureMessage as String +/
   /+ Extends/implements TTS_UNITTEST:TestBase.AssertFalse +/
   %This.AssertTrue(( Not &condition), &failureMessage);
end-method;

/**
  * A simple method to ensure that the given value exists.
  * 
  * @param &value the value to check existence of.
  * @param &onFail the message to display if the value is empty.
  */
method AssertExists
   /+ &value as Any, +/
   /+ &onFail as String +/
   %This.AssertTrue(All(&value), &onFail);
end-method;

/**
  * Determines if the given values are equal, using basic equality.
  * 
  * @param &expected the value you expect the actual to be.
  * @param &actual the value you need to compare to the expected value.
  * @param &onFail the message to display if the values are not equal.
  * @throws TTS_UNITTEST:Exceptions:AssertFailed if the values were unequal.
  */
method AssertEquals
   /+ &expected as Any, +/
   /+ &actual as Any, +/
   /+ &onFail as String +/
   If (&expected <> &actual) Then
      %This.testCaseFailed(&onFail);
      
      Local string &msg = &expected | " <> " | &actual | "! " | &onFail;
      throw create TTS_UNITTEST:Exceptions:AssertFailed(&msg);
   End-If;
   
   %This.testCaseSucceeded();
end-method;

/**
  * Determines if the given values are equal, using basic equality.
  * 
  * @param &expected the value you expect the actual to NOT be.
  * @param &actual the value you need to compare to the expected value.
  * @param &onFail the message to display if the values are equal.
  * @throws TTS_UNITTEST:Exceptions:AssertFailed if the values were equal.
  */
method AssertNotEqual
   /+ &expected as Any, +/
   /+ &actual as Any, +/
   /+ &onFail as String +/
   If (&expected = &actual) Then
      %This.testCaseFailed(&onFail);
      
      Local string &msg = &expected | " = " | &actual | "! " | &onFail;
      throw create TTS_UNITTEST:Exceptions:AssertFailed(&msg);
   End-If;
   
   %This.testCaseSucceeded();
end-method;

method AssertStringsEqual
   /+ &expected as String, +/
   /+ &actual as String, +/
   /+ &onFail as String +/
   /+ Extends/implements TTS_UNITTEST:TestBase.AssertStringsEqual +/
   try
      %Super.AssertStringsEqual(&expected, &actual, &onFail);
      %This.testCaseSucceeded();
   catch TTS_UNITTEST:Exceptions:AssertFailed &e
      %This.testCaseFailed(&onFail);
      throw &e;
   end-try;
end-method;

method AssertStringsDiffer
   /+ &expected as String, +/
   /+ &actual as String, +/
   /+ &onFail as String +/
   /+ Extends/implements TTS_UNITTEST:TestBase.AssertStringsDiffer +/
   try
      %Super.AssertStringsDiffer(&expected, &actual, &onFail);
      %This.testCaseSucceeded();
   catch TTS_UNITTEST:Exceptions:AssertFailed &e
      %This.testCaseFailed(&onFail);
      throw &e;
   end-try;
end-method;

method AssertNumbersEqual
   /+ &expected as Number, +/
   /+ &actual as Number, +/
   /+ &onFail as String +/
   /+ Extends/implements TTS_UNITTEST:TestBase.AssertNumbersEqual +/
   try
      %Super.AssertNumbersEqual(&expected, &actual, &onFail);
      %This.testCaseSucceeded();
   catch TTS_UNITTEST:Exceptions:AssertFailed &e
      %This.testCaseFailed(&onFail);
      throw &e;
   end-try;
end-method;

method AssertNumbersDiffer
   /+ &expected as Number, +/
   /+ &actual as Number, +/
   /+ &onFail as String +/
   /+ Extends/implements TTS_UNITTEST:TestBase.AssertNumbersDiffer +/
   try
      %Super.AssertNumbersDiffer(&expected, &actual, &onFail);
      %This.testCaseSucceeded();
   catch TTS_UNITTEST:Exceptions:AssertFailed &e
      %This.testCaseFailed(&onFail);
      throw &e;
   end-try;
end-method;

method AssertDatesEqual
   /+ &expected as Date, +/
   /+ &actual as Date, +/
   /+ &onFail as String +/
   /+ Extends/implements TTS_UNITTEST:TestBase.AssertDatesEqual +/
   try
      %Super.AssertDatesEqual(&expected, &actual, &onFail);
      %This.testCaseSucceeded();
   catch TTS_UNITTEST:Exceptions:AssertFailed &e
      %This.testCaseFailed(&onFail);
      throw &e;
   end-try;
end-method;

method AssertDatesDiffer
   /+ &expected as Date, +/
   /+ &actual as Date, +/
   /+ &onFail as String +/
   /+ Extends/implements TTS_UNITTEST:TestBase.AssertDatesDiffer +/
   try
      %Super.AssertDatesDiffer(&expected, &actual, &onFail);
      %This.testCaseSucceeded();
   catch TTS_UNITTEST:Exceptions:AssertFailed &e
      %This.testCaseFailed(&onFail);
      throw &e;
   end-try;
end-method;

/**
  * Ensures that the test will fail, and it will output the given reason.
  * 
  * @param &failureReason the reason for the test failing.
  */
method Fail
   /+ &failureReason as String +/
   %This.testCaseFailed(&failureReason);
   throw create TTS_UNITTEST:Exceptions:AssertFailed(&failureReason);
end-method;

/**
  * Ensures that the test will fail, and it will output the given exception's explanation.
  * 
  * @param &exception the exeception to include as the reason for failing.
  */
method FailWithException
   /+ &exception as Exception +/
   %This.testCaseFailed(&exception.ToString());
   throw create TTS_UNITTEST:Exceptions:AssertFailed("Exception: " | &exception.ToString());
end-method;

/**
  * Increments the count of test cases that have succeeded.
  *
  * @param &discardedReason this parameter serves no purpose except readability in tests, so you can name specifically
  *        what was being tested.
  */
method Pass
   /+ &discardedReason as String +/
   %This.testCaseSucceeded();
end-method;

/**
  * Automatically runs all test methods in the given class. For a test to be run automatically with this method, 
  * the method name must begin with "test" and must have no parameters.
  *
  * @param &classPath the class path of the class to run. This can be easily obtained by using String(%This);
  */
method runTestMethodsInClass
   /+ &classPath as String +/
   Local string &rawMethodString = %IntBroker.GetAppClassMethods(&classPath);
   Local array of string &SplitArray = Split(&rawMethodString, ")");
   Local integer &i;
   Local integer &testsRun = 0;
   For &i = 1 To &SplitArray.Len
      Local array of string &SplitArray2 = Split(&SplitArray [&i], "(");
      Local string &method_name = &SplitArray2 [1];
      Local string &params = &SplitArray2 [2];
      If Substring(&method_name, 1, 4) = "test" And
            &params = ";V" Then
         ObjectDoMethod(%This, &method_name);
         &testsRun = &testsRun + 1;
      End-If;
   End-For;
   %This.tests = &testsRun;
end-method;

